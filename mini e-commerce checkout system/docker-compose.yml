# =============================
# DOCKER COMPOSE CONFIGURATION
# =============================

services:
  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - app-network

  # API Gateway (Nginx reverse proxy)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "80:80"
    depends_on:
      - order-service
      - inventory-service
      - payment-service
    networks:
      - app-network

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
    networks:
      - app-network

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
    networks:
      - app-network

  # Inventory Service
  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=inventory-db
      - DB_PORT=5432
      - DB_NAME=inventory
      - DB_USER=postgres
      - DB_PASSWORD=password
    depends_on:
      - inventory-db
    networks:
      - app-network

  # Inventory Database
  inventory-db:
    image: postgres:15
    container_name: inventory-db
    environment:
      - POSTGRES_DB=inventory
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./inventory-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: